#sharding-jdbc分片规则配置
#配置数据源
spring:
  shardingsphere:
    datasource:
      #数据库别名
      names: db01,db02
      db01:
        url: jdbc:mysql://localhost:3316/cloudDB01
        username: root
        password: 123456Aa
        driver-class-name: com.mysql.jdbc.Driver
        type: com.alibaba.druid.pool.DruidDataSource
      db02:
        url: jdbc:mysql://localhost:3316/cloudDB02
        username: root
        password: 123456Aa
        driver-class-name: com.mysql.jdbc.Driver
        type: com.alibaba.druid.pool.DruidDataSource
    #针对某些表的配置，没有配置的表也会走读写分离
    sharding:
      tables:
        #读写分离的表
        t_read_write:
          #指定t_read_write表的数据分布情况，配置数据节点ds0.t_read_write
          actual-data-nodes: ds0.t_read_write
      #配置主从数据库
      master-slave-rules:
#        load-balance-algorithm-type: round_robin  #多个从库的时候有用，负载均衡算法,单个时报错
        ds0:
          master-data-source-name: db01
          slave-data-source-names: db02  #从库的名字，多个之间用英文逗号分隔
    #显示sharding jdbc sql
    props:
      sql:
        show: true
#    #读写分离所有表
#    masterslave:
#      master-data-source-name: db01
#      slave-data-source-names: db02
#      name: datasource
#      load-balance-algorithm-type: round_robin


mybatis:
  mapper-locations:
    - classpath:mapper/**/*.xml                       # mapper映射文件
  configuration:
    #开启驼峰命名
    map-underscore-to-camel-case: true
    auto-mapping-behavior: partial
    #输出日志
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    jdbc-type-for-null: 'null'
    cacheEnabled: false

logging:
  level:
    root: info
    org:
      springframework:
        web: debug
    com:
      itheima:
        dbsharding: debug
      #打印mybatis sql 日志
      com.yuan.sharding.dao: debug
    druid:
      sql: debug
